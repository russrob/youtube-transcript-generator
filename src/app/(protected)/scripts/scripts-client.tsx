"use client";

import { useState, useMemo } from 'react';
import { Script, Video } from '@prisma/client';
import Link from 'next/link';
import jsPDF from 'jspdf';
import { ConfirmationDialog } from '@/components/ui/confirmation-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

interface ScriptWithVideo extends Script {
  video: {
    id: string;
    youtubeId: string;
    title: string;
    thumbnailUrl: string | null;
    createdAt: Date;
    duration: number | null;
  };
}

interface ScriptsClientProps {
  scripts: ScriptWithVideo[];
  userName: string;
}

export function ScriptsClient({ scripts, userName }: ScriptsClientProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStyle, setFilterStyle] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [selectedScripts, setSelectedScripts] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [expandedScript, setExpandedScript] = useState<string | null>(null);
  const [showErrorDialog, setShowErrorDialog] = useState(false);
  const [showSuccessDialog, setShowSuccessDialog] = useState(false);
  const [dialogMessage, setDialogMessage] = useState('');
  const [copiedCount, setCopiedCount] = useState(0);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [scriptToDelete, setScriptToDelete] = useState<ScriptWithVideo | null>(null);
  const [deletingScript, setDeletingScript] = useState<string | null>(null);

  // Filter and sort scripts
  const filteredAndSortedScripts = useMemo(() => {
    let filtered = scripts.filter(script => {
      const matchesSearch = script.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           script.video.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           script.content.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStyle = filterStyle === 'all' || script.style === filterStyle;
      return matchesSearch && matchesStyle;
    });

    switch (sortBy) {
      case 'newest':
        filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
        break;
      case 'oldest':
        filtered.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
        break;
      case 'title':
        filtered.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'video':
        filtered.sort((a, b) => a.video.title.localeCompare(b.video.title));
        break;
      case 'duration':
        filtered.sort((a, b) => b.durationMin - a.durationMin);
        break;
      default:
        break;
    }

    return filtered;
  }, [scripts, searchTerm, filterStyle, sortBy]);

  // Generate and download PDF
  const downloadAsPDF = async (script: ScriptWithVideo) => {
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      const maxWidth = pageWidth - (margin * 2);
      
      // Header
      pdf.setFontSize(20);
      pdf.text(script.title, margin, 30);
      
      pdf.setFontSize(12);
      pdf.text(`Generated by ${userName} | ScriptForge AI`, margin, 45);
      pdf.text(`Video: ${script.video.title}`, margin, 55);
      pdf.text(`Style: ${script.style} | Duration: ${script.durationMin} minutes | Audience: ${script.audience}`, margin, 65);
      pdf.text(`Created: ${new Date(script.createdAt).toLocaleDateString()}`, margin, 75);
      
      // Line separator
      pdf.line(margin, 85, pageWidth - margin, 85);
      
      // Content
      pdf.setFontSize(11);
      const lines = pdf.splitTextToSize(script.content, maxWidth);
      let yPosition = 100;
      
      lines.forEach((line: string) => {
        if (yPosition > pdf.internal.pageSize.getHeight() - 30) {
          pdf.addPage();
          yPosition = 30;
        }
        pdf.text(line, margin, yPosition);
        yPosition += 6;
      });
      
      // Footer
      const totalPages = pdf.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.text(
          `ScriptForge AI - Page ${i} of ${totalPages}`,
          pageWidth - margin - 40,
          pdf.internal.pageSize.getHeight() - 10
        );
      }
      
      // Download
      const fileName = `${script.title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')}.pdf`;
      pdf.save(fileName);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      setDialogMessage('Error generating PDF. Please try again.');
      setShowErrorDialog(true);
    }
  };

  // Delete script
  const handleDeleteScript = (script: ScriptWithVideo) => {
    setScriptToDelete(script);
    setShowDeleteDialog(true);
  };

  const confirmDeleteScript = async () => {
    if (!scriptToDelete) return;

    setDeletingScript(scriptToDelete.id);
    
    try {
      const response = await fetch(`/api/script/delete?id=${scriptToDelete.id}`, {
        method: 'DELETE',
      });

      const data = await response.json();

      if (response.ok) {
        setDialogMessage(`Script "${scriptToDelete.title}" has been deleted successfully.`);
        setShowSuccessDialog(true);
        // Reload the page to refresh the scripts list
        window.location.reload();
      } else {
        setDialogMessage(data.error || 'Failed to delete script. Please try again.');
        setShowErrorDialog(true);
      }
    } catch (error) {
      console.error('Error deleting script:', error);
      setDialogMessage('Error deleting script. Please try again.');
      setShowErrorDialog(true);
    } finally {
      setDeletingScript(null);
      setShowDeleteDialog(false);
      setScriptToDelete(null);
    }
  };

  // Bulk operations
  const downloadSelectedAsPDF = async () => {
    const selectedScriptObjects = scripts.filter(s => selectedScripts.includes(s.id));
    for (const script of selectedScriptObjects) {
      if (script.status === 'COMPLETED') {
        await downloadAsPDF(script);
        // Small delay to prevent browser blocking multiple downloads
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
  };

  const copySelected = () => {
    const selectedContent = scripts
      .filter(s => selectedScripts.includes(s.id) && s.status === 'COMPLETED')
      .map(s => `${s.title}\n\n${s.content}`)
      .join('\n\n---\n\n');
    
    navigator.clipboard.writeText(selectedContent);
    setCopiedCount(selectedScripts.length);
    setDialogMessage(`Copied ${selectedScripts.length} scripts to clipboard`);
    setShowSuccessDialog(true);
  };

  const toggleScriptSelection = (scriptId: string) => {
    setSelectedScripts(prev => 
      prev.includes(scriptId) 
        ? prev.filter(id => id !== scriptId)
        : [...prev, scriptId]
    );
  };

  const selectAll = () => {
    const completedScripts = filteredAndSortedScripts.filter(s => s.status === 'COMPLETED');
    setSelectedScripts(completedScripts.map(s => s.id));
  };

  const clearSelection = () => setSelectedScripts([]);

  if (scripts.length === 0) {
    return (
      <div className="bg-white rounded-xl shadow-sketch-soft border border-sketch-border p-8">
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üìù</div>
          <h2 className="font-sketch-serif text-3xl text-sketch-text mb-2">
            No scripts yet
          </h2>
          <p className="text-sketch-text-muted mb-6">
            Create your first script from a YouTube video in the Studio
          </p>
          <Link href="/studio">
            <Button size="lg">
              Get Started ‚Üí
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Search and Filter Controls */}
      <div className="bg-white rounded-xl shadow-sketch-soft border border-sketch-border p-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="space-y-2">
            <label className="text-sketch-body font-medium text-sketch-text">Search</label>
            <Input
              type="text"
              placeholder="Search scripts or videos..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div className="space-y-2">
            <label className="text-sketch-body font-medium text-sketch-text">Filter by Style</label>
            <Select value={filterStyle} onValueChange={setFilterStyle}>
              <SelectTrigger>
                <SelectValue placeholder="All Styles" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Styles</SelectItem>
                <SelectItem value="PROFESSIONAL">Professional</SelectItem>
                <SelectItem value="CASUAL">Casual</SelectItem>
                <SelectItem value="EDUCATIONAL">Educational</SelectItem>
                <SelectItem value="ENTERTAINING">Entertaining</SelectItem>
                <SelectItem value="TECHNICAL">Technical</SelectItem>
                <SelectItem value="STORYTELLING">Storytelling</SelectItem>
                <SelectItem value="PERSUASIVE">Persuasive ‚ú®</SelectItem>
                <SelectItem value="NARRATIVE">Narrative ‚ú®</SelectItem>
                <SelectItem value="ACADEMIC">Academic ‚ú®</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <label className="text-sketch-body font-medium text-sketch-text">Sort by</label>
            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger>
                <SelectValue placeholder="Newest First" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="newest">Newest First</SelectItem>
                <SelectItem value="oldest">Oldest First</SelectItem>
                <SelectItem value="title">Script Title</SelectItem>
                <SelectItem value="video">Video Title</SelectItem>
                <SelectItem value="duration">Duration</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <label className="text-sketch-body font-medium text-sketch-text">View Mode</label>
            <div className="inline-flex bg-sketch-surface rounded-lg p-0.5 border border-sketch-border">
              <button
                type="button"
                onClick={() => setViewMode('grid')}
                className={`px-3 py-1.5 text-xs font-medium transition-all rounded-md ${
                  viewMode === 'grid' 
                    ? 'bg-sketch-accent shadow-sm' 
                    : 'text-sketch-text-muted hover:text-sketch-text hover:bg-white/50'
                }`}
                style={viewMode === 'grid' ? { color: '#ffffff', backgroundColor: '#262626' } : {}}
              >
                Grid
              </button>
              <button
                type="button"
                onClick={() => setViewMode('list')}
                className={`px-3 py-1.5 text-xs font-medium transition-all rounded-md ${
                  viewMode === 'list' 
                    ? 'bg-sketch-accent shadow-sm' 
                    : 'text-sketch-text-muted hover:text-sketch-text hover:bg-white/50'
                }`}
                style={viewMode === 'list' ? { color: '#ffffff', backgroundColor: '#262626' } : {}}
              >
                List
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Bulk Actions */}
      {selectedScripts.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <span className="text-sm font-medium text-blue-900">
                {selectedScripts.length} script{selectedScripts.length !== 1 ? 's' : ''} selected
              </span>
              <button
                onClick={clearSelection}
                className="text-sm text-blue-600 hover:text-blue-800"
              >
                Clear selection
              </button>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={copySelected}
                className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
              >
                üìã Copy All
              </button>
              <button
                onClick={downloadSelectedAsPDF}
                className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors"
              >
                üìÑ Download PDFs
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Select All / None */}
      {filteredAndSortedScripts.length > 0 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-600">
            Showing {filteredAndSortedScripts.length} of {scripts.length} scripts
          </div>
          <div className="flex space-x-4">
            <button
              onClick={selectAll}
              className="text-sm text-blue-600 hover:text-blue-800"
            >
              Select All Completed
            </button>
            {selectedScripts.length > 0 && (
              <button
                onClick={clearSelection}
                className="text-sm text-gray-600 hover:text-gray-800"
              >
                Clear Selection
              </button>
            )}
          </div>
        </div>
      )}

      {/* Scripts Display */}
      <div className={viewMode === 'grid' ? 'grid gap-6' : 'space-y-4'}>
        {filteredAndSortedScripts.map((script) => (
          <div 
            key={script.id} 
            className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${
              selectedScripts.includes(script.id) ? 'ring-2 ring-blue-500 bg-blue-50' : ''
            }`}
          >
            <div className="flex items-start justify-between">
              {/* Selection Checkbox */}
              <div className="flex items-start space-x-3">
                {script.status === 'COMPLETED' && (
                  <input
                    type="checkbox"
                    checked={selectedScripts.includes(script.id)}
                    onChange={() => toggleScriptSelection(script.id)}
                    className="mt-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                )}
                
                <div className="flex-1">
                  {/* Script Header */}
                  <div className="flex items-center space-x-3 mb-3">
                    {script.video.thumbnailUrl && (
                      <img
                        src={script.video.thumbnailUrl}
                        alt={script.video.title}
                        className="w-16 h-12 object-cover rounded"
                      />
                    )}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">
                        {script.title}
                      </h3>
                      <p className="text-sm text-gray-600">
                        From: {script.video.title}
                      </p>
                    </div>
                  </div>

                  {/* Script Metadata */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-4">
                    <div>
                      <span className="font-medium">Style:</span> {script.style}
                    </div>
                    <div>
                      <span className="font-medium">Duration:</span> {script.durationMin} min
                    </div>
                    <div>
                      <span className="font-medium">Audience:</span> {script.audience}
                    </div>
                    <div>
                      <span className="font-medium">Status:</span>{' '}
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        script.status === 'COMPLETED' 
                          ? 'bg-green-100 text-green-800'
                          : script.status === 'GENERATING'
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {script.status}
                      </span>
                    </div>
                  </div>

                  {/* Script Preview */}
                  {script.status === 'COMPLETED' && (
                    <div className="bg-gray-50 rounded-md p-4 mb-4">
                      <div className={`text-sm text-gray-700 ${
                        expandedScript === script.id ? '' : 'line-clamp-3'
                      }`}>
                        {expandedScript === script.id ? (
                          <pre className="whitespace-pre-wrap font-sans">{script.content}</pre>
                        ) : (
                          `${script.content.substring(0, 200)}...`
                        )}
                      </div>
                      <button
                        onClick={() => setExpandedScript(
                          expandedScript === script.id ? null : script.id
                        )}
                        className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                      >
                        {expandedScript === script.id ? '‚ñ≤ Show Less' : '‚ñº Show More'}
                      </button>
                    </div>
                  )}

                  {/* Creation Date */}
                  <div className="text-xs text-gray-500">
                    Created {new Date(script.createdAt).toLocaleDateString()} at {new Date(script.createdAt).toLocaleTimeString()}
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col space-y-2 ml-4">
                {script.status === 'COMPLETED' && (
                  <>
                    <button 
                      onClick={() => navigator.clipboard.writeText(script.content)}
                      className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                    >
                      üìã Copy
                    </button>
                    <button 
                      onClick={() => downloadAsPDF(script)}
                      className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                    >
                      üìÑ PDF
                    </button>
                    <button 
                      onClick={() => handleDeleteScript(script)}
                      disabled={deletingScript === script.id}
                      className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {deletingScript === script.id ? '‚è≥' : 'üóëÔ∏è'} {deletingScript === script.id ? 'Deleting...' : 'Delete'}
                    </button>
                  </>
                )}
                <a
                  href={`https://www.youtube.com/watch?v=${script.video.youtubeId}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors text-center"
                >
                  üé¨ Video
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* No Results Message */}
      {filteredAndSortedScripts.length === 0 && scripts.length > 0 && (
        <div className="bg-white rounded-lg shadow p-8">
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              No scripts match your search
            </h3>
            <p className="text-gray-600 mb-4">
              Try adjusting your search terms or filters
            </p>
            <button
              onClick={() => {
                setSearchTerm('');
                setFilterStyle('all');
              }}
              className="text-blue-600 hover:text-blue-800"
            >
              Clear all filters
            </button>
          </div>
        </div>
      )}

      {/* Dialogs */}
      <ConfirmationDialog
        isOpen={showErrorDialog}
        onClose={() => setShowErrorDialog(false)}
        onConfirm={() => {}}
        title="Error"
        message={dialogMessage}
        confirmLabel="OK"
        cancelLabel=""
        variant="destructive"
      />

      <ConfirmationDialog
        isOpen={showSuccessDialog}
        onClose={() => setShowSuccessDialog(false)}
        onConfirm={() => {}}
        title="Success"
        message={dialogMessage}
        confirmLabel="OK"
        cancelLabel=""
      />

      <ConfirmationDialog
        isOpen={showDeleteDialog}
        onClose={() => {
          setShowDeleteDialog(false);
          setScriptToDelete(null);
        }}
        onConfirm={confirmDeleteScript}
        title="Delete Script"
        message={`Are you sure you want to delete the script "${scriptToDelete?.title}"? This action cannot be undone.`}
        confirmLabel="Delete"
        cancelLabel="Cancel"
        variant="destructive"
      />
    </div>
  );
}