generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription fields
  subscriptionTier    SubscriptionTier @default(FREE)
  subscriptionStatus  SubscriptionStatus @default(ACTIVE)
  subscriptionStart   DateTime?
  subscriptionEnd     DateTime?
  stripeCustomerId    String?
  stripeSubscriptionId String?

  // Usage tracking
  monthlyScriptCount   Int @default(0)
  totalScriptCount     Int @default(0)
  lastUsageReset       DateTime @default(now())

  // Relations
  videos Video[]
  usageLogs UsageLog[]
  customAudiences CustomAudience[]

  @@map("users")
}

model Video {
  id          String   @id @default(cuid())
  youtubeId   String   @unique
  title       String
  description String?
  duration    Int?     // in seconds
  thumbnailUrl String?
  channelName String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign keys
  userId      String
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transcript  Transcript?
  scripts     Script[]

  @@map("videos")
}

model Transcript {
  id        String   @id @default(cuid())
  content   String   // JSON string of transcript segments
  language  String   @default("en")
  duration  Int?     // in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign keys
  videoId   String   @unique
  
  // Relations
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  scripts   Script[]

  @@map("transcripts")
}

model Script {
  id           String      @id @default(cuid())
  title        String
  content      String
  style        ScriptStyle @default(PROFESSIONAL)
  durationMin  Int         @default(5) // target duration in minutes
  audience     String      @default("general")
  options      String?     // JSON string for additional options
  status       ScriptStatus @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Premium features
  isPriority   Boolean     @default(false) // Priority queue processing
  hasWatermark Boolean     @default(true)  // Watermark for free users
  processingTimeMs Int?     // Track generation time for analytics
  
  // Foreign keys
  videoId      String
  transcriptId String?
  
  // Relations
  video        Video       @relation(fields: [videoId], references: [id], onDelete: Cascade)
  transcript   Transcript? @relation(fields: [transcriptId], references: [id], onDelete: SetNull)

  @@map("scripts")
}

enum ScriptStyle {
  PROFESSIONAL
  CASUAL
  EDUCATIONAL
  ENTERTAINING
  TECHNICAL
  STORYTELLING
  // Pro-only styles
  PERSUASIVE
  NARRATIVE
  ACADEMIC
}

enum ScriptStatus {
  DRAFT
  GENERATING
  COMPLETED
  ERROR
}

enum SubscriptionTier {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

model UsageLog {
  id        String   @id @default(cuid())
  action    String   // "script_generated", "video_processed", etc.
  metadata  String?  // JSON for additional data
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}

model CustomAudience {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name]) // Prevent duplicate names per user
  @@map("custom_audiences")
}